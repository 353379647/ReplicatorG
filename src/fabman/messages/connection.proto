package fabman.messages;

///
/// Sending files to a fabricator queue
///

// SendFile exchanges happen while a file send is initiated.
message SendFileRequest {
  required string name = 1;
  optional string localName = 2;
  optional string remoteName = 3;
  optional uint32 size = 4;
  // Set overwrite to true to force overwrite
  optional bool overwrite = 5 [default = false];
}

message SendFileResponse {
  enum RspCode {
    OK = 0;
    // Generic error
    ERROR = 1;
    // If overwrite is false and the remote file already exists
    CONFLICT = 2;
    // If the target device has insufficient RAM or storage for the file
    OUT_OF_SPACE = 3; 
    // If the caller doesn't have permission to send the file
    PERMISSION_DENIED = 4;
  }
  required RspCode code = 1;
  // If the response is OK, the returned transaction id must be associated
  // with each chunk sent down the line.
  optional uint32 transactionId = 2;
  optional string errorMessage = 3;
  // If no remote name is provided, 
  optional string remoteName = 4;
}

// The actual file data is send through chunk request and responses.
message SendChunkRequest {
  required uint32 transactionId = 1;
  required uint32 chunkSize = 2;
  required uint32 sequenceNumber = 3;
  required bytes data = 4;
}

message SendChunkResponse {
  enum RspCode {
    OK = 0;
    // Generic error
    ERROR = 1;
    // If the target device has insufficient RAM or storage for the chunk
    OUT_OF_SPACE = 2;
    // Double-check that we haven't missed or misordered a chunk
    OUT_OF_SEQUENCE = 3;
  }
  required RspCode code = 1;
}

///
/// Queueing jobs
///

message QueuePrintRequest {
  required string remoteName = 1;
  optional uint32 copies = 2;
}

message QueuePrintResponse {
}

///
/// Reviewing and modifying the job list
///

enum JobStatus {
  QUEUED = 0;
  PAUSED = 1;
  RUNNING = 2;
  WAITING_FOR_USER = 3;
  DONE = 4;
  CANCELLED = 5;
  ERROR = 6;
}

message ListJobsRequest {
}

message ListJobsResponse {
  message JobDescriptor {
    required uint32 jobId = 1;
    required string name = 2;
    required uint32 sequence = 3;
    required JobStatus status = 4;
    optional string details = 5;
  }
  repeated JobDescriptor jobs = 1;
}

message JobModifyRequest {
  // If not specified, the current job at the top of the queue
  optional uint32 jobId = 1;
  // The desired status to set the job to
  optional JobStatus status = 2;
}

message JobModifyResponse {
  enum RspCode {
    OK = 0;
    // Generic error
    ERROR = 1;
    PERMISSION_DENIED = 2;
  }
  required RspCode code = 1;
  optional uint32 jobId = 2;
}
